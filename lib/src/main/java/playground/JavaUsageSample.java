/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package playground;

import io.polygon.kotlin.sdk.DefaultJvmHttpClientProvider;
import io.polygon.kotlin.sdk.rest.ComparisonQueryFilterParameters;
import io.polygon.kotlin.sdk.rest.ComparisonQueryFilterParametersBuilder;
import io.polygon.kotlin.sdk.rest.*;
import io.polygon.kotlin.sdk.rest.experimental.FinancialsParameters;
import io.polygon.kotlin.sdk.rest.experimental.FinancialsParametersBuilder;
import io.polygon.kotlin.sdk.rest.reference.*;
import io.polygon.kotlin.sdk.websocket.*;
import kotlinx.coroutines.channels.Channel;
import org.jetbrains.annotations.NotNull;

import ScripTrading.LoggerUtil;
import ScripTrading.MinuteData;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

public class JavaUsageSample implements Runnable {
	
	private CountDownLatch latch;
	private Map<String, MinuteData> minuteDataMap;
	
	public JavaUsageSample(CountDownLatch latch, Map<String, MinuteData> minuteDataMap) {
		this.latch = latch;
		this.minuteDataMap = minuteDataMap;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
    
        String polygonKey = "6xGq1Yv1LmfdH4fyoThIJphP7J3pdmRS";//System.getenv("POLYGON_API_KEY");
        if (polygonKey == null || polygonKey.isEmpty()) {
        	LoggerUtil.getLogger().info("Make sure you set your polygon API key in the POLYGON_API_KEY environment variable!");
            //System.exit(1);
            return;
        }

        //PolygonRestClient client = new PolygonRestClient(polygonKey);

        //System.out.println("Blocking for markets...");
        //final MarketsDTO markets = client.getReferenceClient().getSupportedMarketsBlocking();
        //System.out.println("Got markets synchronously: " + markets.toString());

        //final CountDownLatch latch = new CountDownLatch(1);
        //System.out.println("Getting markets asynchronously...");

        //client.getReferenceClient().getSupportedMarkets(new PolygonRestApiCallback<MarketsDTO>() {

        //    @Override
        //    public void onSuccess(MarketsDTO result) {
        //        System.out.println("Got markets asynchronously: " + result.toString());
        //        latch.countDown();
        //    }

        //    @Override
        //    public void onError(Throwable error) {
        //        System.out.println("Error getting markets asynchronously");
        //        error.printStackTrace();
        //        latch.countDown();
        //    }
        //});

        //latch.await();
        //System.out.println("Done waiting for async market data\n\n");

        //System.out.println("Using options");
        //AggregatesDTO groupedDaily = client.getGroupedDailyAggregatesBlocking(
        //        new GroupedDailyParametersBuilder().locale("us").market("stocks").date("2022-12-08").build(),
        //        PolygonRestOptions.withTimeout(10_000),
        //        PolygonRestOptions.withQueryParam("additional-param", "additional-value"),
        //        PolygonRestOptions.withHeader("X-Custom-Header", "custom-header-value")
        //);

        //System.out.println("Got " + groupedDaily.getResults().size() + " results from grouped daily");

        //JavaIteratorSample.IteratorSample(client);

        //financialsSample(client);

        //LoggerUtil.getLogger().info("Websocket sample:");
        //Map<String, MinuteData> minuteDataMap = Collections.synnew LinkedHashMap<>();
        // List<GraphSegment> graphSegments = new ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("HH:mm");
        Calendar calendar = Calendar.getInstance();
        
        String currentDateString = sdf.format(calendar.getTime());
        
        websocketSample(polygonKey, minuteDataMap, calendar, simpleDateFormat, currentDateString);
        
        latch.countDown();
    }

    public static void websocketSample(String polygonKey, Map<String, MinuteData> minuteDataMap, Calendar calendar, SimpleDateFormat sdf, 
    		String currentDateString) {
        PolygonWebSocketClient client = new PolygonWebSocketClient(
                polygonKey,
                PolygonWebSocketCluster.Stocks,
                new DefaultPolygonWebSocketListener() {
                	
                	private Map<String, MinuteData> OneMDataMap = new LinkedHashMap<>(); 
                	
                    @Override
                    public void onReceive(@NotNull PolygonWebSocketClient client, @NotNull PolygonWebSocketMessage message) {
                        //if (message instanceof PolygonWebSocketMessage.RawMessage) {
                        //	PolygonWebSocketMessage.RawMessage wsmessage = ((PolygonWebSocketMessage.RawMessage) message);
                        //    System.out.println(new String(wsmessage.getData()));
                    	if (message instanceof PolygonWebSocketMessage.StocksMessage) {
                    		PolygonWebSocketMessage.StocksMessage.Aggregate wsmessage = ((PolygonWebSocketMessage.StocksMessage.Aggregate) message);
                    		System.out.println(wsmessage);
                    		LoggerUtil.getLogger().info(wsmessage.toString());
                    		
                    		calendar.setTimeInMillis(wsmessage.getStartTimestampMillis());
                    		MinuteData mData = new MinuteData();
                    		mData.setClosePrice(wsmessage.getClosePrice());
                    		mData.setOpenPrice(wsmessage.getOpenPrice());
                    		mData.setHighPrice(wsmessage.getHighPrice());
                    		mData.setLowPrice(wsmessage.getLowPrice());
                    		String time = sdf.format(calendar.getTime());
                    		OneMDataMap.put(time, mData);
                    		
                    		if (time.charAt(4) == '0' || time.charAt(4) == '5') {
                    			MinuteData fiveMData = new MinuteData();
                    			fiveMData.setClosePrice(mData.getClosePrice());
                    			minuteDataMap.put(time, fiveMData);
                    			
                    			/*if (tradeDataMap.containsKey(currentDateString)) {
                    				TradeData tradeData = tradeDataMap.get(currentDateString);
                    				if (tradeData.getStrike() > 0) {
                    					new Thread(new OptionDownloader(callMap, time, (int) (tradeData.getStrike() * 1000))).start();
                    				}
                    			}*/
                    		}
                    		
                    		/*List<MinuteData> fiveMinuteList = new ArrayList<>();
                    		List<GraphSegment> graphSegments = new ArrayList<>();
                    		for (String time : minuteDataMap.keySet()) {
                    			if (time.charAt(4) == '0' || time.charAt(4) == '5') {
                    				double fiveMinVol = 0;
                    				double fiveMinOpen = fiveMinuteList.get(0).getOpenPrice();
                    				double fiveMinClose = fiveMinuteList.get(fiveMinuteList.size() - 1).getClosePrice();
                    				double fiveMinHigh = 0;
                    				double fiveMinLow = fiveMinuteList.get(0).getLowPrice();
                    				for (MinuteData md : fiveMinuteList) {
                    					fiveMinVol = fiveMinVol + md.getVolume();
                    					if (md.getHighPrice() > fiveMinHigh) {
                    						fiveMinHigh = md.getHighPrice();
                    					}
                    					if (md.getLowPrice() < fiveMinLow) {
                    						fiveMinLow = md.getLowPrice();
                    					}
                    				}
                    				//Util.calculateGraphSegments(graphSegments, fiveMinVol, fiveMinOpen, fiveMinClose, fiveMinHigh, fiveMinLow, time, 0.25);
                    				fiveMinuteList.clear();
                    				fiveMinuteList.add(minuteDataMap.get(time));
                    			} else {
                    				fiveMinuteList.add(minuteDataMap.get(time));
                    			}
                    		}*/
                    		// Print Graph Segments
                    		//for (GraphSegment graphSegment : graphSegments) {
                    		//	LoggerUtil.getLogger().info(graphSegment.toString());
                    		//}
                    	} else {

                    		LoggerUtil.getLogger().info(message.toString());
                        }
                    }
                    
                    
					@Override
                    public void onError(@NotNull PolygonWebSocketClient client, @NotNull Throwable error) {
						LoggerUtil.getLogger().info("Error in websocket");
						LoggerUtil.getLogger().info(error.getMessage());
                    }
                },
                Channel.UNLIMITED,
                new DefaultJvmHttpClientProvider(),
                "delayed.polygon.io");

        try {
        	client.connectBlocking();

        	List<PolygonWebSocketSubscription> subs = Collections.singletonList(
                new PolygonWebSocketSubscription(PolygonWebSocketChannel.Stocks.AggPerMinute.INSTANCE, "QQQ"));
        	client.subscribeBlocking(subs);

        	long startWait = System.currentTimeMillis();
        	long timeToSleep = 23400000;
        	do {
        		try {
        			Thread.sleep(timeToSleep);
        		} catch (Exception e) { }
        		timeToSleep = 23400000 - (System.currentTimeMillis() - startWait);
        	} while (timeToSleep > 0);
            
            client.unsubscribeBlocking(subs);
            client.disconnectBlocking();
        } catch (Exception e) {
        	LoggerUtil.getLogger().info("Error in JavaUsageThread main thread ");
			LoggerUtil.getLogger().info(e.getMessage());
        }

        
    }

    /*public static void supportedTickersSample(PolygonRestClient polygonRestClient) {
        System.out.println("3 Supported Tickers: ");
        SupportedTickersParameters params = new SupportedTickersParametersBuilder()
                .limit(3)
                .market("fx")
                .build();

        System.out.println(polygonRestClient
                .getReferenceClient()
                .getSupportedTickersBlocking(params)
        );
    }

    public static void tickerDetailsSample(PolygonRestClient polygonRestClient) {
        System.out.println("Redfin Ticker Details: ");
        System.out.println(polygonRestClient.getReferenceClient().getTickerDetailsBlocking("RDFN"));
    }

    public static void dividendsSample(PolygonRestClient polygonRestClient) {
        System.out.println("GE dividends:");
        DividendsParameters geParams = new DividendsParametersBuilder()
                .ticker(ComparisonQueryFilterParameters.equal("GE"))
                .limit(1)
                .build();
        System.out.println(polygonRestClient.getReferenceClient().getDividendsBlocking(geParams));

        System.out.println("Dividends with cash amounts between $1 and $10");
        DividendsParameters cashAmountFilterParams = new DividendsParametersBuilder()
                .cashAmount(new ComparisonQueryFilterParametersBuilder<Double>()
                        .greaterThanOrEqual(1.0)
                        .lessThanOrEqual(10.0)
                        .build())
                .limit(1)
                .build();
        System.out.println(polygonRestClient.getReferenceClient().getDividendsBlocking(cashAmountFilterParams));
    }

    public static void financialsSample(PolygonRestClient polygonRestClient) {
        System.out.println("RDFN Financials");
        FinancialsParameters params = new FinancialsParametersBuilder().ticker("RDFN").build();
        System.out.println(polygonRestClient.getExperimentalClient().getFinancialsBlocking(params));
    }*/

}
